{
  "version": 3,
  "sources": ["../../@radix-ui/react-collapsible/dist/packages/react/collapsible/src/index.ts", "../../@radix-ui/react-collapsible/dist/packages/react/collapsible/src/Collapsible.tsx", "../../@radix-ui/react-accordion/dist/packages/react/accordion/src/index.ts", "../../@radix-ui/react-accordion/dist/packages/react/accordion/src/Accordion.tsx"],
  "sourcesContent": ["export {\n  createCollapsibleScope,\n  //\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  //\n  Root,\n  Trigger,\n  Content,\n} from './Collapsible';\nexport type {\n  CollapsibleProps,\n  CollapsibleTriggerProps,\n  CollapsibleContentProps,\n} from './Collapsible';\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Collapsible\n * -----------------------------------------------------------------------------------------------*/\n\nconst COLLAPSIBLE_NAME = 'Collapsible';\n\ntype ScopedProps<P> = P & { __scopeCollapsible?: Scope };\nconst [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\n\ntype CollapsibleContextValue = {\n  contentId: string;\n  disabled?: boolean;\n  open: boolean;\n  onOpenToggle(): void;\n};\n\nconst [CollapsibleProvider, useCollapsibleContext] =\n  createCollapsibleContext<CollapsibleContextValue>(COLLAPSIBLE_NAME);\n\ntype CollapsibleElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CollapsibleProps extends PrimitiveDivProps {\n  defaultOpen?: boolean;\n  open?: boolean;\n  disabled?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst Collapsible = React.forwardRef<CollapsibleElement, CollapsibleProps>(\n  (props: ScopedProps<CollapsibleProps>, forwardedRef) => {\n    const {\n      __scopeCollapsible,\n      open: openProp,\n      defaultOpen,\n      disabled,\n      onOpenChange,\n      ...collapsibleProps\n    } = props;\n\n    const [open = false, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n    });\n\n    return (\n      <CollapsibleProvider\n        scope={__scopeCollapsible}\n        disabled={disabled}\n        contentId={useId()}\n        open={open}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      >\n        <Primitive.div\n          data-state={getState(open)}\n          data-disabled={disabled ? '' : undefined}\n          {...collapsibleProps}\n          ref={forwardedRef}\n        />\n      </CollapsibleProvider>\n    );\n  }\n);\n\nCollapsible.displayName = COLLAPSIBLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'CollapsibleTrigger';\n\ntype CollapsibleTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CollapsibleTriggerProps extends PrimitiveButtonProps {}\n\nconst CollapsibleTrigger = React.forwardRef<CollapsibleTriggerElement, CollapsibleTriggerProps>(\n  (props: ScopedProps<CollapsibleTriggerProps>, forwardedRef) => {\n    const { __scopeCollapsible, ...triggerProps } = props;\n    const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-controls={context.contentId}\n        aria-expanded={context.open || false}\n        data-state={getState(context.open)}\n        data-disabled={context.disabled ? '' : undefined}\n        disabled={context.disabled}\n        {...triggerProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nCollapsibleTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'CollapsibleContent';\n\ntype CollapsibleContentElement = CollapsibleContentImplElement;\ninterface CollapsibleContentProps extends Omit<CollapsibleContentImplProps, 'present'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CollapsibleContent = React.forwardRef<CollapsibleContentElement, CollapsibleContentProps>(\n  (props: ScopedProps<CollapsibleContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n    return (\n      <Presence present={forceMount || context.open}>\n        {({ present }) => (\n          <CollapsibleContentImpl {...contentProps} ref={forwardedRef} present={present} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nCollapsibleContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype CollapsibleContentImplElement = React.ElementRef<typeof Primitive.div>;\ninterface CollapsibleContentImplProps extends PrimitiveDivProps {\n  present: boolean;\n}\n\nconst CollapsibleContentImpl = React.forwardRef<\n  CollapsibleContentImplElement,\n  CollapsibleContentImplProps\n>((props: ScopedProps<CollapsibleContentImplProps>, forwardedRef) => {\n  const { __scopeCollapsible, present, children, ...contentProps } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef<CollapsibleContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef<number | undefined>(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef<number | undefined>(0);\n  const width = widthRef.current;\n  // when opening we want it to immediately open to retrieve dimensions\n  // when closing we delay `present` to retrieve dimensions before closing\n  const isOpen = context.open || isPresent;\n  const isMountAnimationPreventedRef = React.useRef(isOpen);\n  const originalStylesRef = React.useRef<Record<string, string>>();\n\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => (isMountAnimationPreventedRef.current = false));\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      originalStylesRef.current = originalStylesRef.current || {\n        transitionDuration: node.style.transitionDuration,\n        animationName: node.style.animationName,\n      };\n      // block any animations/transitions so the element renders at its full dimensions\n      node.style.transitionDuration = '0s';\n      node.style.animationName = 'none';\n\n      // get width and height from full dimensions\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n\n      // kick off any animations/transitions that were originally set up if it isn't the initial mount\n      if (!isMountAnimationPreventedRef.current) {\n        node.style.transitionDuration = originalStylesRef.current.transitionDuration;\n        node.style.animationName = originalStylesRef.current.animationName;\n      }\n\n      setIsPresent(present);\n    }\n    /**\n     * depends on `context.open` because it will change to `false`\n     * when a close is triggered but `present` will be `false` on\n     * animation end (so when close finishes). This allows us to\n     * retrieve the dimensions *before* closing.\n     */\n  }, [context.open, present]);\n\n  return (\n    <Primitive.div\n      data-state={getState(context.open)}\n      data-disabled={context.disabled ? '' : undefined}\n      id={context.contentId}\n      hidden={!isOpen}\n      {...contentProps}\n      ref={composedRefs}\n      style={{\n        [`--radix-collapsible-content-height` as any]: height ? `${height}px` : undefined,\n        [`--radix-collapsible-content-width` as any]: width ? `${width}px` : undefined,\n        ...props.style,\n      }}\n    >\n      {isOpen && children}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Collapsible;\nconst Trigger = CollapsibleTrigger;\nconst Content = CollapsibleContent;\n\nexport {\n  createCollapsibleScope,\n  //\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  //\n  Root,\n  Trigger,\n  Content,\n};\nexport type { CollapsibleProps, CollapsibleTriggerProps, CollapsibleContentProps };\n", "export {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n} from './Accordion';\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n} from './Accordion';\n", "import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowRight'];\n\nconst [Collection, useCollection, createCollectionScope] =\n  createCollection<AccordionTriggerElement>(ACCORDION_NAME);\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollectionScope,\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props: ScopedProps<AccordionSingleProps | AccordionMultipleProps>, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n    const singleProps = accordionProps as AccordionImplSingleProps;\n    const multipleProps = accordionProps as AccordionImplMultipleProps;\n    return (\n      <Collection.Provider scope={props.__scopeAccordion}>\n        {type === 'multiple' ? (\n          <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />\n        ) : (\n          <AccordionImplSingle {...singleProps} ref={forwardedRef} />\n        )}\n      </Collection.Provider>\n    );\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\nAccordion.propTypes = {\n  type(props) {\n    const value = props.value || props.defaultValue;\n    if (props.type && !['single', 'multiple'].includes(props.type)) {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected one of `single | multiple`.'\n      );\n    }\n    if (props.type === 'multiple' && typeof value === 'string') {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected `single` when `defaultValue` or `value` is type `string`.'\n      );\n    }\n    if (props.type === 'single' && Array.isArray(value)) {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected `multiple` when `defaultValue` or `value` is type `string[]`.'\n      );\n    }\n    return null;\n  },\n};\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={value ? [value] : []}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue: string) =>\n      setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  disabled?: boolean;\n  direction: AccordionImplProps['dir'];\n  orientation: AccordionImplProps['orientation'];\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * The layout in which the Accordion operates.\n   * @default vertical\n   */\n  orientation?: React.AriaAttributes['aria-orientation'];\n  /**\n   * The language read direction.\n   */\n  dir?: Direction;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, dir, orientation = 'vertical', ...accordionProps } = props;\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n    const getItems = useCollection(__scopeAccordion);\n    const direction = useDirection(dir);\n    const isDirectionLTR = direction === 'ltr';\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      if (!ACCORDION_KEYS.includes(event.key)) return;\n      const target = event.target as HTMLElement;\n      const triggerCollection = getItems().filter((item) => !item.ref.current?.disabled);\n      const triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target);\n      const triggerCount = triggerCollection.length;\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      const homeIndex = 0;\n      const endIndex = triggerCount - 1;\n\n      const moveNext = () => {\n        nextIndex = triggerIndex + 1;\n        if (nextIndex > endIndex) {\n          nextIndex = homeIndex;\n        }\n      };\n\n      const movePrev = () => {\n        nextIndex = triggerIndex - 1;\n        if (nextIndex < homeIndex) {\n          nextIndex = endIndex;\n        }\n      };\n\n      switch (event.key) {\n        case 'Home':\n          nextIndex = homeIndex;\n          break;\n        case 'End':\n          nextIndex = endIndex;\n          break;\n        case 'ArrowRight':\n          if (orientation === 'horizontal') {\n            if (isDirectionLTR) {\n              moveNext();\n            } else {\n              movePrev();\n            }\n          }\n          break;\n        case 'ArrowDown':\n          if (orientation === 'vertical') {\n            moveNext();\n          }\n          break;\n        case 'ArrowLeft':\n          if (orientation === 'horizontal') {\n            if (isDirectionLTR) {\n              movePrev();\n            } else {\n              moveNext();\n            }\n          }\n          break;\n        case 'ArrowUp':\n          if (orientation === 'vertical') {\n            movePrev();\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerCollection[clampedIndex].ref.current?.focus();\n    });\n\n    return (\n      <AccordionImplProvider\n        scope={__scopeAccordion}\n        disabled={disabled}\n        direction={dir}\n        orientation={orientation}\n      >\n        <Collection.Slot scope={__scopeAccordion}>\n          <Primitive.div\n            {...accordionProps}\n            data-orientation={orientation}\n            ref={composedRefs}\n            onKeyDown={disabled ? undefined : handleKeyDown}\n          />\n        </Collection.Slot>\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ElementRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-orientation={accordionContext.orientation}\n          data-state={getState(open)}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ElementRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-orientation={accordionContext.orientation}\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ElementRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <Collection.ItemSlot scope={__scopeAccordion}>\n        <CollapsiblePrimitive.Trigger\n          aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n          data-orientation={accordionContext.orientation}\n          id={itemContext.triggerId}\n          {...collapsibleScope}\n          {...triggerProps}\n          ref={forwardedRef}\n        />\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ElementRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        data-orientation={accordionContext.orientation}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"],
  "mappings": "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",
  "names": ["COLLAPSIBLE_NAME", "createCollapsibleContext", "createCollapsibleScope", "createContextScope", "CollapsibleProvider", "useCollapsibleContext", "Collapsible", "React", "props", "forwardedRef", "open", "openProp", "collapsibleProps", "setOpen", "useControllableState", "prop", "defaultProp", "defaultOpen", "onChange", "onOpenChange", "$73KQ4$createElement", "__scopeCollapsible", "useId", "prevOpen", "getState", "disabled", "undefined", "TRIGGER_NAME", "CollapsibleTrigger", "triggerProps", "context", "contentId", "composeEventHandlers", "onClick", "onOpenToggle", "CONTENT_NAME", "CollapsibleContent", "contentProps", "forceMount", "present", "CollapsibleContentImpl", "isPresent", "setIsPresent", "ref", "composedRefs", "useComposedRefs", "heightRef", "height", "current", "widthRef", "width", "isOpen", "isMountAnimationPreventedRef", "originalStylesRef", "rAF", "requestAnimationFrame", "cancelAnimationFrame", "useLayoutEffect", "node", "transitionDuration", "style", "animationName", "rect", "getBoundingClientRect", "children", "Root", "Trigger", "Content", "ACCORDION_NAME", "ACCORDION_KEYS", "Collection", "useCollection", "createCollectionScope", "createCollection", "createAccordionContext", "createAccordionScope", "createContextScope", "createCollapsibleScope", "useCollapsibleScope", "Accordion", "React", "forwardRef", "props", "forwardedRef", "accordionProps", "singleProps", "multipleProps", "$3DjNB$react", "__scopeAccordion", "type", "propTypes", "value", "defaultValue", "includes", "Error", "Array", "isArray", "AccordionValueProvider", "useAccordionValueContext", "AccordionCollapsibleProvider", "useAccordionCollapsibleContext", "collapsible", "AccordionImplSingle", "valueProp", "accordionSingleProps", "setValue", "useControllableState", "prop", "defaultProp", "onChange", "onValueChange", "useCallback", "AccordionImplMultiple", "accordionMultipleProps", "handleItemOpen", "itemValue", "prevValue", "handleItemClose", "filter", "AccordionImplProvider", "useAccordionContext", "AccordionImpl", "accordionRef", "useRef", "composedRefs", "useComposedRefs", "getItems", "direction", "useDirection", "dir", "isDirectionLTR", "handleKeyDown", "composeEventHandlers", "onKeyDown", "event", "key", "target", "triggerCollection", "item", "ref", "current", "disabled", "triggerIndex", "findIndex", "triggerCount", "length", "preventDefault", "nextIndex", "homeIndex", "endIndex", "moveNext", "movePrev", "orientation", "clampedIndex", "focus", "undefined", "ITEM_NAME", "AccordionItemProvider", "useAccordionItemContext", "AccordionItem", "accordionItemProps", "accordionContext", "valueContext", "collapsibleScope", "triggerId", "useId", "open", "getState", "onItemOpen", "onItemClose", "HEADER_NAME", "AccordionHeader", "headerProps", "itemContext", "TRIGGER_NAME", "AccordionTrigger", "triggerProps", "collapsibleContext", "CONTENT_NAME", "AccordionContent", "contentProps", "style", "Root", "Item", "Header", "Trigger", "Content"]
}
